Ext.define('Ayushman.controller.cdm.components.InstructionHolderController', { extend : 'Ayushman.common.baseclasses.controller.BaseController',   requires: ['Ext.util.MixedCollection'],    config: 	{		// as the corresponding view class for this controller is not in the default namespace, we must set the nameSpacePrefix property		nameSpacePrefix: 'Ayushman.view.cdm.components.',		containerTitle: null,		filterConfig: null,		planId: null,		objectsToSave:  null,		instrTypeDDHidden: false	},   	createInstanceOfView: function()	{		this.callParent();		var newHashMap = new Ext.util.MixedCollection();		this.setObjectsToSave(newHashMap);		console.log("Inside createInstanceOfView of InstructionHolderController");	},	 	change_instructionTypesDD: function(me, newValue, oldValue, eOpts)	{		if(oldValue != null)		{			var singleInstrContainerControllerInstance = Ext.create('Ayushman.controller.cdm.components.SingleInstructionContainerController', 																{ globalControllerInstance: this.getGlobalControllerInstance(), instructionType: newValue, instrHoldersObjectsToSave: this.getObjectsToSave() });			me.getParent().add(singleInstrContainerControllerInstance.getViewInstance());						var objectsToBeSaved = this.getObjectsToSave();				if(objectsToBeSaved.getCount() > 0)			{				var keyOfLastObject = objectsToBeSaved.last().getKeyInInstrHoldersObjectsToSave();				singleInstrContainerControllerInstance.setKeyInInstrHoldersObjectsToSave(keyOfLastObject + 1);				objectsToBeSaved.add(keyOfLastObject + 1, singleInstrContainerControllerInstance);			}			else			{				singleInstrContainerControllerInstance.setKeyInInstrHoldersObjectsToSave(1);				objectsToBeSaved.add(1, singleInstrContainerControllerInstance);			}		}			},		save: function()	{		console.log("Save for Instruction Holder components controller is called!");				var instructionTypeAndItsCountMap = Ext.create('Ext.util.HashMap');		var objectsToSave = this.getObjectsToSave();			objectsToSave.each(function(value, index, length)			{						console.log("InstructionHolder planId: " +this.getPlanId());					value.setPlanId(this.getPlanId());								// following logic computes the instructionNumber				if( instructionTypeAndItsCountMap.containsKey(value.getInstructionType()) === true )				{					var existingCount = instructionTypeAndItsCountMap.get(value.getInstructionType());															value.setInstructionNumber(existingCount + 1);														instructionTypeAndItsCountMap.removeByKey(value.getInstructionType());					instructionTypeAndItsCountMap.add(value.getInstructionType(), 	existingCount + 1 );				}				else				{										instructionTypeAndItsCountMap.add(value.getInstructionType(), 1 );										value.setInstructionNumber(1);				}										value.save();								},this);			},		destroy: function()	{		console.log("Destroy of InstructionHolderController has been called!");		this.callParent();				this.setNameSpacePrefix(null);		this.setContainerTitle(null);		this.setFilterConfig(null);		this.setObjectsToSave(null);		this.setPlanId(null);				console.log("Destroy of InstructionHolderController has been Finished!");	}});