Ext.define('Ayushman.controller.cdm.components.PreviousPlansListItemComponentController', { extend : 'Ayushman.common.baseclasses.controller.BaseController',   requires: ['Ext.util.MixedCollection'],    config: 	{		// as the corresponding view class for this controller is not in the default namespace, we must set the nameSpacePrefix property		nameSpacePrefix: 'Ayushman.view.cdm.components.',		planId: null,		startDate: null,		endDate: null	},	 	createInstanceOfView: function()	{		this.callParent();			this.getViewInstance().getComponent('previousPlanListItemContainer').getComponent('planId').setHtml(this.getPlanId());		this.getViewInstance().getComponent('previousPlanListItemContainer').getComponent('startDate').setHtml(this.getStartDate());		this.getViewInstance().getComponent('previousPlanListItemContainer').getComponent('endDate').setHtml(this.getEndDate());	},			tap_listItemContainer: function(event, node, options, eOpts)	{		var patientsPlanDetailsStore = Ext.getStore('PatientsPlanDetailsStore');		patientsPlanDetailsStore.setRemoteFilter(false);		patientsPlanDetailsStore.clearFilter();			patientsPlanDetailsStore.filter([				{property: "plan_id", value: this.getPlanId()}			]);						var instructionsDetailsArray = {};			patientsPlanDetailsStore.each(function (item, index, length) {				var id = item.get('id');				var planId = item.get('plan_id');				var instructionId = item.get('instruction_id');				var instruction_type_id = item.get('instruction_type_id');				var instruction_number = item.get('instruction_number');				var instruction_attribute = item.get('instruction_attribute');				var instruction_attribute_value = item.get('instruction_attribute_value');								var singleInstructionDetails = {};				if(instructionId in instructionsDetailsArray)				{					singleInstructionDetails = instructionsDetailsArray[instructionId];				}				singleInstructionDetails["instruction_id"] = instructionId;				singleInstructionDetails[instruction_attribute] = instruction_attribute_value;				singleInstructionDetails["instruction_type_id"] = instruction_type_id;				singleInstructionDetails["instruction_number"] = instruction_number;				instructionsDetailsArray[instructionId] = singleInstructionDetails;			}, this);				//TODO: Remove this hardcoded array.		var instructionTypesArray = {											"1":"DurationBased", "2":"BodyWeightBased", "3":"WeightBased", "4":"CalorieBased",											"5":"FoodBased", "10":"HealthParamBased", "11":"LabBased"										};		var instructionTypeAndItsGroup = {											"1":"Exercise", "2":"Exercise", "3":"Exercise", "4":"Nutrition",											"5":"Nutrition", "10":"Tests", "11":"Tests"										};		var previousRegimenControllerInstance = Ext.create('Ayushman.controller.cdm.PreviousRegimenController', 																{ 																	globalControllerInstance : this.getGlobalControllerInstance()																});		var previousRegimenViewInstance = previousRegimenControllerInstance.getViewInstance();				var exerciseInstructionsHolderControllerInstance = Ext.create('Ayushman.controller.cdm.components.InstructionHolderController', 																{ 																		globalControllerInstance 	: this.getGlobalControllerInstance(), 																	containerTitle				: 'Exercise',																	filterConfig				: { property: "category", value: /Exercise/ },																	instrTypeDDHidden 			: true 																																		});		var exerciseInstructionHolderViewInstance = exerciseInstructionsHolderControllerInstance.getViewInstance();		previousRegimenViewInstance.getComponent('previousRegimenMainContainer').add(exerciseInstructionHolderViewInstance);		//previousRegimenControllerInstance.getObjectsToSave().add(1, exerciseInstructionsHolderControllerInstance);				var nutritionInstructionsHolderControllerInstance = Ext.create('Ayushman.controller.cdm.components.InstructionHolderController', 																{ 																		globalControllerInstance 	: this.getGlobalControllerInstance(), 																	containerTitle				: 'Nutrition',																	filterConfig				: { property: "category", value: /Nutrition/ },																	instrTypeDDHidden 			: true 																																		});		var nutritionInstructionHolderViewInstance = nutritionInstructionsHolderControllerInstance.getViewInstance();		previousRegimenViewInstance.getComponent('previousRegimenMainContainer').add(nutritionInstructionHolderViewInstance);		//previousRegimenControllerInstance.getObjectsToSave().add(2, nutritionInstructionsHolderControllerInstance);				var testsInstructionsHolderControllerInstance = Ext.create('Ayushman.controller.cdm.components.InstructionHolderController', 																{ 																		globalControllerInstance 	: this.getGlobalControllerInstance(), 																	containerTitle				: 'Tests',																	filterConfig				: { property: "category", value: /Tests/ },																	instrTypeDDHidden 			: true 																																		});		var testsInstructionHolderViewInstance = testsInstructionsHolderControllerInstance.getViewInstance();		previousRegimenViewInstance.getComponent('previousRegimenMainContainer').add(testsInstructionHolderViewInstance);		//previousRegimenControllerInstance.getObjectsToSave().add(3, testsInstructionsHolderControllerInstance);					for (var key in instructionsDetailsArray) 			{				var instructionDetailsObject = instructionsDetailsArray[key];								var instruction_type_id = instructionDetailsObject["instruction_type_id"];				var instruction_number = instructionDetailsObject["instruction_number"];				var instruction_attribute = instructionDetailsObject["instruction_attribute"];				var instruction_attribute_value = instructionDetailsObject["instruction_attribute_value"];				var configurationObject = {};								configurationObject["globalControllerInstance"] = this.getGlobalControllerInstance();				configurationObject["instructionType"] = instructionTypesArray[instruction_type_id];				var initializationDetails = {};				for (var configKey in instructionDetailsObject) 				{					if((configKey !== "instruction_type_id") && (configKey !== "instruction_number"))					{						initializationDetails[configKey] = instructionDetailsObject[configKey];					}				}				configurationObject["initializationConfiguration"] = initializationDetails;				//debugger;				var singleInstrContainerControllerInstance = Ext.create('Ayushman.controller.cdm.components.SingleInstructionContainerController', configurationObject);				if(instructionTypeAndItsGroup[instruction_type_id] === "Tests")				{					targetInstructionHolderViewInstance = testsInstructionHolderViewInstance;				}				else if(instructionTypeAndItsGroup[instruction_type_id] === "Nutrition")				{					targetInstructionHolderViewInstance = nutritionInstructionHolderViewInstance;				}				else				{					targetInstructionHolderViewInstance = exerciseInstructionHolderViewInstance;				}							targetInstructionHolderViewInstance.getComponent('instrHolderOuterContainer').getComponent('instructionsContainer').add(singleInstrContainerControllerInstance.getViewInstance());			}						this.getGlobalControllerInstance().getViewInstance().getComponent('iohFrameViewInnerContainer').add(previousRegimenViewInstance);			this.getGlobalControllerInstance().getViewInstance().getComponent('iohFrameViewInnerContainer').setActiveItem(previousRegimenViewInstance);						//following code is for maintaining the original state of the PatientsPlanDetailsStore			patientsPlanDetailsStore.clearFilter();			patientsPlanDetailsStore.setRemoteFilter(true);			var doctorCredentialsStore = Ext.getStore('UserCredentials');			var doctorsDetails = doctorCredentialsStore.getAt(0);			patientsPlanDetailsStore.filter([					{property: "doctor_id", value: doctorsDetails.get('roleSpecificId')}				]);					},		destroy: function()	{		console.log("Destroy of PreviousPlansListItemComponentController has been called!");		this.callParent();				this.setNameSpacePrefix(null);				console.log("Destroy of PreviousPlansListItemComponentController has been Finished!");	}});